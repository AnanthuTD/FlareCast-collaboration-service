generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model WorkSpace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      Type
  name      String
  userId    String
  createdAt DateTime @default(now())
  folders   Folder[]
  members   Member[]
  invite    Invite[]

  @@index([userId])
  @@index([name])
}

model Folder {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String     @default("Untitled Folder")
  createdAt      DateTime   @default(now())
  workspaceId    String?    @db.ObjectId
  Workspace      WorkSpace? @relation(fields: [workspaceId], references: [id])
  parentFolderId String?    @db.ObjectId
  ParentFolder   Folder?    @relation("ParentChilds", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childFolders   Folder[]   @relation("ParentChilds")

  @@index([workspaceId])
  @@index([parentFolderId])
}

model Member {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?
  createdAt   DateTime   @default(now())
  member      Boolean    @default(true)
  workspaceId String?    @db.ObjectId
  Workspace   WorkSpace? @relation(fields: [workspaceId], references: [id])

  @@index([userId])
  @@index([workspaceId])
}

model Invite {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  senderId    String?
  recieverId  String?
  content     String
  accepted    Boolean    @default(false)
  workspaceId String?    @db.ObjectId
  Workspace   WorkSpace? @relation(fields: [workspaceId], references: [id])

  @@index([senderId])
  @@index([recieverId])
  @@index([workspaceId])
}

enum Type {
  PERSONAL
  PUBLIC
}
