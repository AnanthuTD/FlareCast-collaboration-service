generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String      @id @map("_id") @db.ObjectId
  email                String      @unique
  name                 String
  workspaces           WorkSpace[] @relation("owned-workspaces")
  invites              Invite[]
  memberships          Member[]
  selectedWorkspace    String?     @db.ObjectId
  selectedWorkspaceRel WorkSpace?  @relation("selected-workspace", fields: [selectedWorkspace], references: [id], onDelete: NoAction, onUpdate: NoAction)
  Chats                Chat[]
  maxWorkspaces        Int         @default(1)
  maxMembers           Int         @default(1)
}

model WorkSpace {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  type          Type     @default(PERSONAL)
  name          String
  userId        String   @db.ObjectId
  createdAt     DateTime @default(now())
  folders       Folder[]
  members       Member[]
  invites       Invite[]
  owner         User     @relation("owned-workspaces", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  selectedUsers User[]   @relation("selected-workspace")
  Space         Space[]

  @@index([userId])
  @@index([name])
}

model Space {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  createdAt   DateTime  @default(now())
  folders     Folder[]
  memberIds   String[]  @db.ObjectId
  members     Member[]  @relation("MemberSpaces", fields: [memberIds], references: [id])
  type        SpaceType
  workspaceId String    @db.ObjectId
  Workspace   WorkSpace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([name])
}

enum SpaceType {
  DEFAULT
  OPEN
  CLOSED
}

model Folder {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String     @default("Untitled Folder")
  createdAt      DateTime   @default(now())
  workspaceId    String?    @db.ObjectId
  Workspace      WorkSpace? @relation(fields: [workspaceId], references: [id])
  parentFolderId String?    @db.ObjectId
  ParentFolder   Folder?    @relation("ParentChilds", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childFolders   Folder[]   @relation("ParentChilds")
  Space          Space?     @relation(fields: [spaceId], references: [id])
  spaceId        String?    @db.ObjectId

  @@index([workspaceId])
  @@index([parentFolderId])
}

model Member {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  role        Role      @default(MEMBER)
  workspaceId String    @db.ObjectId
  Workspace   WorkSpace @relation(fields: [workspaceId], references: [id])
  User        User      @relation(fields: [userId], references: [id])
  spaceIds    String[]  @db.ObjectId
  spaces      Space[]   @relation("MemberSpaces", fields: [spaceIds], references: [id])

  @@index([userId])
  @@index([workspaceId])
}

enum Role {
  ADMIN
  EDITOR
  MEMBER
}

model Invite {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  senderId         String
  receiverId       String?      @db.ObjectId
  receiverEmail    String?      @unique
  content          String?
  invitationStatus InviteStatus @default(PENDING)
  workspaceId      String       @db.ObjectId
  Workspace        WorkSpace    @relation(fields: [workspaceId], references: [id])
  updatedAt        DateTime     @default(now())
  User             User?        @relation(fields: [receiverId], references: [id])

  @@unique([workspaceId, receiverId])
  @@unique([workspaceId, receiverEmail])
  @@index([senderId])
  @@index([workspaceId])
  @@index([receiverId])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum Type {
  PERSONAL
  PUBLIC
}

model Chat {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  User   User   @relation(fields: [userId], references: [id])

  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  videoId String @db.ObjectId

  repliedTo  String? @db.ObjectId
  ParentChat Chat?   @relation("ReplyTo", fields: [repliedTo], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Chat       Chat[]  @relation("ReplyTo")

  @@index([videoId])
}
