generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @map("_id") @db.ObjectId
  email      String
  name       String
  workspaces WorkSpace[]
  Invite     Invite[]
  Member     Member[]

  @@index([email])
}

model WorkSpace {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      Type     @default(PERSONAL)
  name      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  folders   Folder[]
  members   Member[]
  invite    Invite[]
  User      User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([name])
}

model Folder {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String     @default("Untitled Folder")
  createdAt      DateTime   @default(now())
  workspaceId    String?    @db.ObjectId
  Workspace      WorkSpace? @relation(fields: [workspaceId], references: [id])
  parentFolderId String?    @db.ObjectId
  ParentFolder   Folder?    @relation("ParentChilds", fields: [parentFolderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childFolders   Folder[]   @relation("ParentChilds")

  @@index([workspaceId])
  @@index([parentFolderId])
}

model Member {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  role        Role      @default(MEMBER)
  workspaceId String    @db.ObjectId
  Workspace   WorkSpace @relation(fields: [workspaceId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([workspaceId])
}

enum Role {
  ADMIN
  EDITOR
  MEMBER
}

model Invite {
  id               String       @id @default(auto()) @map("_id") @db.ObjectId
  senderId         String
  receiverId       String?      @db.ObjectId
  receiverEmail    String?      @unique
  content          String?
  invitationStatus InviteStatus @default(PENDING)
  workspaceId      String       @db.ObjectId
  Workspace        WorkSpace    @relation(fields: [workspaceId], references: [id])
  updatedAt        DateTime     @default(now())
  User             User?        @relation(fields: [receiverId], references: [id])

  @@unique([workspaceId, receiverId])
  @@unique([workspaceId, receiverEmail])
  @@index([senderId])
  @@index([workspaceId])
  @@index([receiverId])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum Type {
  PERSONAL
  PUBLIC
}
